@numba.jit(nopython=True)
def csr_format(A: np.ndarray) -> Csr_format:
    data, col_idx, row_ptr = csr_format_numba(A)
    return Csr_format(data, col_idx, row_ptr, A.shape)

@numba.jit(nopython=True)
def csr_format_numba(A: Csr_format):  #-> Tuple[np.ndarray, np.ndarray, np.ndarray]:
    # CSR format
    a, col_idx = np.nonzero(A)

    data = np.empty(len(a), dtype=A.dtype)
    row_ptr = np.empty(A.shape[0] + 1, dtype=np.int64)

    start = a[0]
    count = 0
    row_ptr[0] = 0

    for i in range(len(a)):
        data[i] = A[a[i]][col_idx[i]]
        if start != a[i]:
            count += 1
            row_ptr[count] = row_ptr[count - 1] + np.count_nonzero(a == count - 1)
            start = a[i]

    row_ptr[-1] = len(data)

    return data, col_idx, row_ptr
@numba.jit(nopython=True)
def generate_sparse_matrix(dim1, dim2, diag, non_zero):
    A = np.zeros((dim1, dim2), dtype=float)
    if diag == "yes" and dim1 == dim2:
        for i in range(dim1):
            A[i][i] = random.randint(-100, 100)
    else:
        for _ in range(non_zero):
            A[random.randrange(dim1)][random.randrange(dim2)] = random.randint(-100, 100)
    return A
@numba.jit(nopython=True)
def generate_b(dim1):
    #generate random b array of 1 dimension
    b=np.empty(dim1)
    for i in range(dim1):
        b[i]=random.randint(-100,100)
    return b
